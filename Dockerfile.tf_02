FROM tf:01
LABEL maintainer="mpekalski@gmail.com"

USER root

ENV NUM_CORES=8 \
    VER_PYTHON=python3.5 \
    VER_PROTOBUF=v3.4.1 \
    VER_SPARK=2.2.0 \
    VER_JUPYTER_LAB=v0.27.0 \
    VER_JUPYTER_HUB=0.8.0 \
    VER_JUPYTER_NOTEBOOK=5.1.0 \ 
    VER_CONF_PROXY=3.0.0 \
    VER_VTK=v8.0.1 \
    VTK_DIR=/opt/vtk \
    VER_OPENCV=3.3.0 \
    OPENCV_DIR=/opt/opencv \
    R_COMPILE_PKGS=1 \
    VER_BAZEL=0.5.3 \
    VER_ANACONDA=5.0.0.1 \
    VER_KERAS=2.0.8 \
    NB_USER=jovyan \
    NB_UID=1000 \
    NB_GID=100 \
    CONDA_DIR=/opt/conda \
    HADOOP_VERSION=2.7 \
    PATH=$PATH:$JAVA_HOME/bin \
    LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/:/usr/local/cuda/lib64/:/usr/local/nvidia/lib:/usr/local/nvidia/lib64/:${CONDA_DIR}/lib/R/lib/:${CONDA_DIR}/lib/ \
    PATH=/opt/conda/bin:/usr/lib/jvm/java-8-openjdk-amd64:/opt/bin:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH \
    TMP="/tmp" \ 
    TMPDIR="/tmp" \
    HOME=/home/jovyan

ADD fix-permissions /usr/local/bin/fix-permissions

# Create jovyan user with UID=1000 and in the 'users' group
# and make sure these dirs are writable by the `users` group.
RUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \
    mkdir -p $CONDA_DIR && \
    chown $NB_USER:$NB_GID $CONDA_DIR && \
    fix-permissions $HOME && \
    echo 'LC_ALL=en_US.UTF-8\nLANG=en_US.UTF-8\nLANGUAGE=en_US.UTF-8' >> /etc/environment && \
    echo "en_US.UTF-8 UTF-8" > /etc/locale.gen

RUN apt-get update && \
    apt-get install -y  locales && \
    >> /etc/locale.gen && \
    locale-gen en_US en_US.UTF-8 && \
    update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 && \
    locale  && \
    apt-get install -y --no-install-recommends apt-utils && \
    apt-get install -y vim wget curl gcc g++ unzip autoconf automake libtool \
                       git openjdk-8-jdk libcupti-dev libopenblas-dev libblas-dev \
                       libatlas-dev libatlas-base-dev libpq-dev libssl-dev libxml2-dev \
                       libopenblas-base gfortran htop iotop \
                       bash-completion locate locales locales-all nodejs nodejs-legacy npm \
                       pandoc emacs build-essential gcc g++ zlib1g-dev supervisor && \
    apt-get -y remove ffmpeg x264 libx264-dev && \
    #Prerequisites for OpenCV.
    apt-get install -y qt5-default zlib1g-dev liblapacke-dev               \
            libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev\
            libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev   \
            libavformat-dev libswscale-dev libtheora-dev libvorbis-dev   \
            libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev       \
            libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev     \
            libeigen3-dev  build-essential cmake git libgtk2.0-dev       \
            pkg-config python-dev python-numpy libdc1394-22 libqt4-dev   \
            libjpeg-dev libpng12-dev  libjasper-dev     \
            libavcodec-dev libtbb-dev     \
            libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev       \
            libv4l-dev libfaac-dev libmp3lame-dev  \
            x264 v4l-utils libgstreamer1.0-dev libopencv-dev \
            libgstreamer-plugins-base1.0-dev gphoto2        \
            libtiff-tools libbz2-dev libgphoto2-dev libavresample-dev    \
            gtk+-3.0-dev libv4l-dev libudev-dev libglu1-mesa-dev         \
            g++-multilib  libtifiles2-9   libpng++-dev libpng3    \
            zlib1g-dbg swig libjasper-runtime libpq-dev          \
            libgdal-dev libx264-dev libblas-dev liblapack-dev libgdcm2-dev \
            g++-4.9 gcc-4.9 doxygen libpq5 libgtk-3-dev  gfortran libhdf5-serial-dev \
            ocl-icd-libopencl1 clinfo freeglut3-dev mesa-common-dev freeglut3-dev && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# https://github.com/NVIDIA/nvidia-docker/blob/v1.0.0/ubuntu-14.04/opencl/runtime/Dockerfile
RUN mkdir -p /etc/OpenCL/vendors && \
    echo "libnvidia-opencl.so.1" > /etc/OpenCL/vendors/nvidia.icd

RUN echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf

# Install Anaconda
#COPY Anaconda3-${VER_ANACONDA}-Linux-x86_64.sh /tmp/Anaconda3-${VER_ANACONDA}-Linux-x86_64.sh
# curl -O https://repo.continuum.io/archive/Anaconda3-${VER_ANACONDA}-Linux-x86_64.sh && \
RUN cd /tmp && \
    curl -O https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh && \
    chmod 755 Miniconda3-latest-Linux-x86_64.sh && \
    ./Miniconda3-latest-Linux-x86_64.sh -b -u -p $CONDA_DIR && \
    rm Miniconda3-latest-Linux-x86_64.sh

RUN conda install -y python=3.5.0 && \
    conda install -y numpy scipy matplotlib conda-build notebook gcc plotly \
                     pandas scipy scikit-learn nltk six wheel seaborn h5py && \
    conda install -y -c intel mkl    && \
    conda install -y -c conda-forge feather-format pandas-profiling ggplot && \
    conda clean -tiy        

# PILLOW SIMD
RUN cd /tmp && \
    git clone https://github.com/uploadcare/pillow-simd && \
    cd pillow-simd && \
    CC="cc -mavx2" pip install -U --force-reinstall pillow-simd && \
    rm -rf /tmp/pillow-simd

# Install facets which does not have a pip or conda package at the moment
RUN cd /tmp && \
    git clone https://github.com/PAIR-code/facets.git && \
    cd facets && \
    jupyter nbextension install facets-dist/ --sys-prefix && \
    rm -rf /tmp/facets

#RUN update-java-alternatives -s java-1.8.0-openjdk-amd64 && \
#    R CMD javareconf JAVA_CPPFLAGS=-I/usr/lib/jvm/java/include/

RUN rm ${CONDA_DIR}/lib/libstdc++.so.6 && \
    ln -s /usr/lib/x86_64-linux-gnu/libstdc++.so.6 ${CONDA_DIR}/lib/libstdc++.so.6 

RUN npm install bower -g && \
    npm cache clear

RUN pip install git+https://github.com/jupyterhub/jupyterhub.git@${VER_JUPTER_HUB} && \
    pip install git+https://github.com/jupyter/notebook.git@${VER_JUPYTER_NOTEBOOK} && \ 
    pip install git+https://github.com/jupyterlab/jupyterlab.git@${VER_JUPYTER_LAB}

# configurable-proxy for jupyterhub
#https://github.com/npm/npm/issues/10983
RUN cd /tmp && \
    git clone https://github.com/jupyterhub/configurable-http-proxy && \
    cd configurable-http-proxy  &&\
    git checkout ${VER_CONF_PROXY} && \
    cd /tmp/configurable-http-proxy && \
    npm install -g && \
    rm -rf /tmp/configurable-http-proxy/ 

# Keras
RUN pip install git+https://github.com/fchollet/keras.git@${VER_KERAS}

ENV JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre \
    PATH=$PATH:$JAVA_HOME/bin \
    LD_LIBRARY_PATH=/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/:/usr/local/cuda/lib64/ \
    JAVA_LIBS='-L/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/amd64 -L/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/amd64/server/ -L/usr/lib -ljvm -ldl' \
    PATH=/opt/conda/bin:/usr/lib/jvm/java-8-openjdk-amd64:$PATH 
    
RUN ldconfig

# Build VTK, OpenCV asks for folder with it
RUN cd /tmp && \
    git clone https://github.com/Kitware/VTK.git && \
    cd VTK && \
    git checkout --track -b release origin/release && \
    git checkout ${VER_VTK} && \
    mkdir build && \ 
    cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/opt/vtk  -DBUILD_SHARED_LIBS=ON && \
    make -j${NUM_CORES} && \
    make install && \
    rm /tmp/vtk -rf


# Install libTIFF so OpenCV does not complain about missing references and version number
RUN cd /tmp && \
    wget http://old-releases.ubuntu.com/ubuntu/pool/universe/t/tiff3/libtiff4_3.9.7-2ubuntu1_amd64.deb && \
    dpkg -i libtiff4_3.9.7-2ubuntu1_amd64.deb  && \
    rm libtiff4_3.9.7-2ubuntu1_amd64.deb && \
    ldconfig

# LibLZMA 
RUN cd /tmp && \
    wget http://tukaani.org/xz/xz-5.2.2.tar.gz && \
    tar -zxvf xz-5.2.2.tar.gz && \
    cd xz-5.2.2/  && \
    ./configure && \
    make -j${NUM_CORES} && \
    make install && \
    cd .. && \
    rm xz-5.2.2.tar.gz && \
    rm xz-5.2.2/ -rf    

ENV OLD_PATH=${PATH} \
    PATH=/usr/lib/x86_64-linux-gnu:/usr/lib/jvm/java-8-openjdk-amd64:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin 
    

#-DOPENCV_EXTRA_MODULES_PATH=/tmp/opencv_contrib/modules/ \
#-DHAVE_GDCM=ON \
RUN cd /tmp && \
    git clone https://github.com/opencv/opencv.git && \
    cd opencv && \
    git checkout master && \
    git clone https://github.com/opencv/opencv_contrib.git && \
    cd /tmp/opencv && \
    mkdir build && \
    cd build && \
    cmake .. \
    -DCMAKE_C_COMPILER=gcc-4.9 \
    -DCMAKE_CXX_COMPILER=g++-4.9 \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=${OPENCV_DIR} \
    -DWITH_TBB=ON \
    -DWITH_QT=ON \
    -DWITH_PTHREADS_PF=ON \
    -DWITH_OPENNI2=OFF \
    -DBUILD_opencv_legacy=ON \
    -DBUILD_NEW_PYTHON_SUPPORT=ON \
    -DWITH_V4L=ON \
    -DWITH_QT=ON \
    -DWITH_CUDA=ON \
    -DWITH_CUFFT=ON \
    -DWITH_CUBLAS=ON \
    -DCMAKE_LIBRARY_PATH=/usr/local/cuda/lib64/stubs \
    -DENABLE_PRECOMPILED_HEADERS=OFF \
    -DUSE_GStreamer=ON \
    -DBUILD_OPENCV_PYTHON3=1 \
    -DPYTHON3_EXECUTABLE=${CONDA_DIR}/bin/${VER_PYTHON} \
    -DPYTHON3_INCLUDE_DIR=${CONDA_DIR}/include/${VER_PYTHON}m \
    -DPYTHON3_LIBRARIES=${CONDA_DIR}/lib/${VER_PYTHON}/site-packages \
    -DPYTHON3_LIBRARY=${CONDA_DIR}/lib/lib${VER_PYTHON}m.so \
    -DCUDA_ARCH_BIN=3.2 \
    -DFORCE_VTK=ON \
    -DWITH_GDAL=ON \
    -DWITH_XINE=ON \
    -DWITH_NVCUVID=ON \
    -DBUILD_EXAMPLES=ON \
    -DBUILD_NEW_PYTHON_SUPPORT=ON \
    -DWITH_V4L=ON \
    -DINSTALL_C_EXAMPLES=ON \
    -DINSTALL_PYTHON_EXAMPLES=ON \
    -DBUILD_EXAMPLES=ON \
    -DWITH_OPENNI=OFF \
    -DWITH_OPENGL=ON \
    -DWITH_IPP=ON \
    -DWITH_CSTRIPES=ON \
    -DCUDA_ARCH_PTX=3.2 \
    -DCUDA_ARCH_BIN=3.2 \
    -DWITH_CUBLAS=ON \
    -DWITH_NVCUVID=ON \
    -DENABLE_FAST_MATH=1 \ 
    -DCUDA_FAST_MATH=1 \
    -DCUDA_NVCC_FLAGS="-D_FORCE_INLINES" \
    -DWITH_QT=ON                    \
    -DWITH_OPENGL=ON                \
    -DWITH_TBB=ON                   \
    -DWITH_GDAL=ON                  \
    -DWITH_XINE=ON                  \
    -DINSTALL_C_EXAMPLES=ON         \
    -DBUILD_EXAMPLES=ON             \
    -DINSTALL_PYTHON_EXAMPLES=ON    \
    -DBUILD_TESTS=ON                \
    -DWITH_TIFF=ON                  \
    -DBUILD_TIFF=OFF                \
    -DVTK_DIR=${VTK_DIR}/build                \
    -DOPENCL_LIBRARIES=/usr/local/cuda-9.0/targets/x86_64-linux/lib/libOpenCL.so.1.0.0  && \
    cd /tmp/opencv/build && \    
    make -j${NUM_CORES+1} && \
    cd /tmp/opencv/build && \
    make install  && \
    rm /tmp/opencv -rf && \
    rm /tmp/opencv_contrib -rf

 #xgboost
RUN cd /usr/local/src && mkdir xgboost && cd xgboost && \
    git clone --depth 1 --recursive https://github.com/dmlc/xgboost.git && cd xgboost && \
    make && cd python-package && ${CONDA_DIR}/bin/${VER_PYTHON} setup.py install

RUN cd /tmp && git clone --recursive https://github.com/caffe2/caffe2.git && cd caffe2 && \
    make && cd build && sudo make install && \
    ${CONDA_DIR}/bin/python3 -c 'from caffe2.python import core' 2>/dev/null && echo "Success" || echo "Failure"




# Docker cannot run two CMD in one file, so if one wants to run multiple
# processes it is required to use something like supervisor.
RUN mkdir -p /var/log/supervisor && \
    mkdir -p /etc/jupyterhub && \
    chown $NB_USER:$NB_GID /opt/bin -R && \
    fix-permissions /etc/jupyterhub/


#NotebookS

# we need to overwrite LD-LIBRARY so nvidia can find libnvidia-ml.so
ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server/:/usr/local/cuda/lib64/:/usr/local/nvidia/lib:/usr/local/nvidia/lib64/:${CONDA_DIR}/lib/R/lib/:${CONDA_DIR}/lib/ 
ENV PATH=${OLD_PATH}:/usr/local/cuda-9.0/targets/x86_64-linux/lib/stubs

RUN cd /tmp/protobuf/python && \
    ${CONDA_DIR}/bin/${VER_PYTHON} setup.py install --cpp_implementation && \
    cd /tmp/tensorflow_pkg/  && \
    ${CONDA_DIR}/bin/pip install *.whl 

ENV GFLAGS_INCLUDE_DIRS=/opt/gflags/include \
    GFLAGS_LIBRARY=/opt/gflags/lib \
    GLOG_INCLUDE_DIR=/opt/glog/include \
    GLOG_LIBRARY=/opt/glog/lib

# GFlags and GLog and GTest
RUN cd /tmp && \
    git clone https://github.com/gflags/gflags && \
    cd gflags && mkdir build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/opt/gflags -DBUILD_SHARED_LIBS=ON && \
    make -j${NUM_CORES} && make install && \
    cd /tmp && \
    git clone https://github.com/google/glog.git && \
    cd glog && mkdir build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/opt/glog -DBUILD_SHARED_LIBS=ON && \
    make -j${NUM_CORES} && make install && \
    cd /tmp && \
    git clone https://github.com/google/googletest.git && \
    cd googletest && mkdir build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/opt/googletest -DBUILD_SHARED_LIBS=ON && \
    make -j${NUM_CORES} && make install && \ 
    rm /tmp/* -rf && \
    updatedb && ldconfig 
    

ENV PATH=/opt/boost/bin:${PATH} \
    BOOST_ROOT=/opt/boost \
    LD_LIBRARY_PATH=/opt/boost/lib:$LD_LIBRARY_PATH \
    VER_BOOST=1.65.1 \
    VER_BOOST_=1_65_1 \
    CPATH=$CPLUS_INCLUDE_PATH:/usr/include/${VER_PYTHON}m

RUN cd /tmp && \
    curl -L -o boost.tar.gz --url https://dl.bintray.com/boostorg/release/${VER_BOOST}/source/boost_${VER_BOOST_}.tar.gz && \
    tar -zxvf boost.tar.gz && cd boost_${VER_BOOST_} && \
    ./bootstrap.sh --prefix=/opt/boost
RUN cd /tmp/boost_${VER_BOOST_} && \  
    ./b2 install -j9 --with-program_options address-model=64  link=static,shared threading=multi --with-python --with-system  \ 
                     --with-thread --with-mpi --with-signals --with-regex --with-timer --with-iostreams --with-graph_parallel \
                     --with-serialization 

EXPOSE 6006 8000
WORKDIR $HOME
# Configure container startup
ENTRYPOINT ["/tini", "--"]
CMD ["/usr/bin/supervisord"]
#CMD ["start-notebook.sh","start-tensorboard.sh"]

# Add local files as late as possible to avoid cache busting
COPY start.sh /opt/bin/
COPY start-tensorboard.sh /opt/bin/
COPY start-notebook.sh /opt/bin/
COPY start-jupyterhub.sh /opt/bin/
COPY start-singleuser.sh /opt/bin/
COPY jupyter_notebook_config.py /etc/jupyter/
COPY jupyterhub_config.py /etc/jupyterhub/
COPY supervisord.conf /etc/supervisor/supervisord.conf
COPY tensorboard.conf /etc/supervisor/conf.d/tensorboard.conf
COPY jupyterhub.conf  /etc/supervisor/conf.d/jupyterhub.conf


# Cleaning
#
RUN rm /tmp/* -rf && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    conda clean -tiy   && \
    npm cache clean  && \
    rm -rf /root/.cache/pip/* 
# seems like OpenCV compiled without VTK
# need to isntall Protobuf and Tensorflow for Anaconda's python
#substitute cuda version for variable, in different folder names