FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04 AS ml_01
LABEL maintainer="mpekalski@gmail.com"

USER root
ARG CONDA_DIR=/opt/conda
ARG NUM_CORES=8
ARG VER_PYTHON=python3
#    VER_SPARK=2.2.0 \     
#    VER_HADOOP=2.7 \    

ENV TERM=xterm       \
    SHELL=/bin/bash  \
    R_COMPILE_PKGS=1 \
    JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre \
    JAVA_LIBS='-L/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/amd64 -L/usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/lib/amd64/server/ -L/usr/lib -ljvm -ldl' \
    LD_LIBRARY_PATH=${JAVA_HOME}/lib/amd64/server/:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server:/opt/boost/lib:${CONDA_DIR}/lib/:/usr/local/cuda/lib64/:${CONDA_DIR}/lib/R/lib/:/usr/local/nvidia/lib64/:/usr/local/nvidia/lib:/lib/x86_64-linux-gnu:/usr/local/cuda/extras/CUPTI/lib64 \
    PATH=/opt/conda/bin:${JAVA_HOME}/bin:/opt/boost/bin:/usr/lib/jvm/java-8-openjdk-amd64:/opt/bin:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH \
    CC=/usr/bin/gcc   \
    CXX=/usr/bin/g++  \
    CUDNN_INSTALL_PATH=/usr/local/cuda \
    CPATH=$CPLUS_INCLUDE_PATH:/usr/include/${VER_PYTHON}m \
    TMP="/tmp"   \ 
    TMPDIR="/tmp" \
    NUM_CORES=${NUM_CORES}\ 
    VER_PYTHON=${VER_PYTHON}\
    CONDA_DIR=${CONDA_DIR}

# Create jovyan user with UID=1000 and in the 'users' group
# and make sure these dirs are writable by the `users` group.
RUN mkdir -p ${CONDA_DIR} && \
    mkdir -p /opt/bin/ && \
    echo 'LC_ALL=en_US.UTF-8\nLANG=en_US.UTF-8\nLANGUAGE=en_US.UTF-8' >> /etc/environment && \
    echo "en_US.UTF-8 UTF-8" > /etc/locale.gen

# Tensorflow is looking for /usr/bin/env python, so we create softlink here
RUN apt-get update && \
    apt-get install -y  locales && \
    >> /etc/locale.gen && \
    locale-gen en_US en_US.UTF-8 && \
    update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 && \
    locale  && \    
    apt-get install -y --no-install-recommends apt-utils && \
    apt-get install -y --no-install-recommends \
                        vim build-essential git wget curl g++ gcc pkg-config     \
                        htop iotop \
                        unzip autoconf automake libtool zlib1g-dev           \
                        bash-completion python3-pip libzmq3-dev libpng12-dev \
                        openjdk-8-jdk openjdk-8-jre-headless libcurl3-dev    \
                        libfreetype6-dev openjdk-8-jre-headless python3.5    \
                        python3-dev libxml2-dev libxslt-dev libcupti-dev     \
                        libopenblas-dev libblas-dev libatlas-dev             \
                        libatlas-base-dev libpq-dev libssl-dev libxml2-dev   \
                        libopenblas-base gfortran pandoc emacs supervisor    \
                        bash-completion locate nodejs nodejs-legacy npm      \
                        openmpi-bin openmpi-doc libhiredis-dev libeigen3-dev \
                        rsync && \
    #apt-get -y remove ffmpeg x264 libx264-dev && \
    #Prerequisites for OpenCV.
    # we have to install pip and numpy for python2 otherwisse cmake does not find neither python 2 nor 3
    apt-get install -y --no-install-recommends \
            qt5-default zlib1g-dev liblapacke-dev               \
            libjpeg-dev libwebp-dev libpng-dev libtiff5-dev libjasper-dev\
            libopenexr-dev libgdal-dev libdc1394-22-dev libavcodec-dev   \
            libavformat-dev libswscale-dev libtheora-dev libvorbis-dev   \
            libxvidcore-dev libx264-dev yasm libopencore-amrnb-dev       \
            libopencore-amrwb-dev libv4l-dev libxine2-dev libtbb-dev     \
            libeigen3-dev  build-essential cmake git libgtk2.0-dev       \
            pkg-config python3-numpy libdc1394-22 libqt4-dev   \
            libjpeg-dev libpng12-dev libjasper-dev     \
            libavcodec-dev libtbb-dev     \
            libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev       \
            libv4l-dev libfaac-dev libmp3lame-dev  \
            x264 v4l-utils libgstreamer1.0-dev \
            libgstreamer-plugins-base1.0-dev gphoto2        \
            libtiff-tools libbz2-dev libgphoto2-dev libavresample-dev    \
            gtk+-3.0-dev libv4l-dev libudev-dev libglu1-mesa-dev         \
            g++-multilib  libtifiles2-9   libpng++-dev libpng3    \
            zlib1g-dbg swig libjasper-runtime libpq-dev          \
            libgdal-dev libx264-dev libblas-dev liblapack-dev libgdcm2-dev \
            g++-4.9 gcc-4.9 doxygen libpq5 libgtk-3-dev  gfortran libhdf5-serial-dev \
            ocl-icd-libopencl1 clinfo freeglut3-dev mesa-common-dev freeglut3-dev \
            python-pip libpython2.7 python2.7-dev && \                        
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*    

RUN pip3 install --no-cache-dir --upgrade pip setuptools && \
    pip3 install --no-cache-dir six numpy wheel          && \
    /usr/bin/pip --no-cache-dir install numpy  

# https://github.com/NVIDIA/nvidia-docker/blob/v1.0.0/ubuntu-14.04/opencl/runtime/Dockerfile
RUN mkdir -p /etc/OpenCL/vendors                                     && \
    echo "libnvidia-opencl.so.1"    > /etc/OpenCL/vendors/nvidia.icd && \
    echo "/usr/local/nvidia/lib"   >> /etc/ld.so.conf.d/nvidia.conf  && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf


FROM ml_01 AS ml_02
# Build c++ protobuf then build python version and install. 
# That should be the fastest protobuf for python.
ARG VER_PROTOBUF=v3.4.1
RUN alias g++="g++ --std=c++0x" && \
    cd /tmp && \
    git clone https://github.com/google/protobuf.git && \
    cd protobuf && \
    git checkout ${VER_PROTOBUF} && \
    ./autogen.sh && \
    CXXFLAGS=" -march=native -fPIC -g -O2 " ./configure --prefix=/usr && \
    make -j${NUM_CORES} && \
    make check && \
    make install && \
    ldconfig # refresh shared library cache. && \
    cd python && \
    /usr/bin/python setup.py build --cpp_implementation && \
    /usr/bin/python setup.py install

RUN cd /tmp/protobuf/python && \
    /usr/bin/python3 setup.py bdist_wheel --cpp_implementation --compile_static_extension

# we do not delete protobuf folder here, we will need it later
FROM ml_01 AS ml_03
USER root
COPY --from=ml_02 /tmp/protobuf/python/dist/*.whl /pip_pkg/

# workarounds for bazel not running from within container when build
# https://github.com/tensorflow/tensorflow/blob/89f15928293f62b63404ffbdabbb6a3b07274ff8/tensorflow/tools/docker/Dockerfile.devel-gpu-cuda9-cudnn7
# Set up Bazel.

# Running bazel inside a `docker build` command causes trouble, cf:
#   https://github.com/bazelbuild/bazel/issues/134
# The easiest solution is to set up a bazelrc file forcing --batch.
RUN echo "startup --batch" >>/etc/bazel.bazelrc
# Similarly, we need to workaround sandboxing issues:
#   https://github.com/bazelbuild/bazel/issues/418
RUN echo "build --spawn_strategy=standalone --genrule_strategy=standalone" \
    >> /etc/bazel.bazelrc

# Install Bazel needed to build Tensorflow
ARG VER_BAZEL=0.5.4
RUN wget https://github.com/bazelbuild/bazel/releases/download/${VER_BAZEL}/bazel_${VER_BAZEL}-linux-x86_64.deb && \
    dpkg -i bazel_${VER_BAZEL}-linux-x86_64.deb && \
    rm bazel_${VER_BAZEL}-linux-x86_64.deb

# Setup tensorflow config variables
ENV PYTHON_BIN_PATH=/usr/bin/${VER_PYTHON} \
    PYTHON_LIB_PATH=/usr/lib/${VER_PYTHON}/dist-packages \
    CC_OPT_FLAGS=-march=native \
    TF_NEED_JEMALLOC=1 \
    TF_NEED_S3=0   \
    TF_NEED_GDR=0  \
    TF_NEED_GCP=0 \
    TF_NEED_HDFS=0 \
    TF_ENABLE_XLA=0 \
    TF_NEED_VERBS=0 \
    TF_NEED_OPENCL=0 \
    TF_NEED_CUDA=1 \
    TF_NEED_MKL=0 \
    TF_DOWNLOAD_MKL=0 \
    TF_NEED_MPI=0 \
    TF_CUDA_CLANG=0 \
    TF_CUDA_VERSION=9.0 \
    CUDA_TOOLKIT_PATH=/usr/local/cuda \
    GCC_HOST_COMPILER_PATH=/usr/bin/gcc \
    TF_CUDNN_VERSION=7 \
    TF_CUDA_COMPUTE_CAPABILITIES=6.0,6.1,7.0 \
    HOST_CXX_COMPILER=/usr/bin/g++ \
    HOST_C_COMPILER=/usr/bin/gcc \
    LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:${LD_LIBRARY_PATH}

ARG VER_TENSORFLOW=v1.4.0-rc1
#RUN echo "/usr/local/cuda-9.0/targets/x86_64-linux/lib/stubs/" >> /etc/ld.so.conf.d/nvidia_mp.conf && ldconfig 

RUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 && ldconfig && \
    cd /tmp && \
    git clone --recurse-submodules https://github.com/tensorflow/tensorflow && \
    cd tensorflow && \    
    git checkout ${VER_TENSORFLOW} && \
    cd /tmp/tensorflow && \    
    /usr/bin/${VER_PYTHON} configure.py  && \
    LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} \
    bazel build -c opt \
                --config=cuda \
                --copt=-march=native \
                --copt=-mfpmath=both \
                --copt=-mtune=native \
                --verbose_failures \
                --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" \
                --jobs=${NUM_CORES} \
                //tensorflow/tools/pip_package:build_pip_package  && \
    bazel-bin/tensorflow/tools/pip_package/build_pip_package /pip_pkg && \
    rm -rf /tmp/tensorflow   

FROM ml_01 AS ml_04
COPY --from=ml_03 /pip_pkg/* /pip_pkg/

# Install Miniconda
# curl -O https://repo.continuum.io/archive/Anaconda3-${VER_ANACONDA}-Linux-x86_64.sh && \
# I install notebook here to get all dependencies, and later will upgrade from github
ARG VER_MINICONDA=4.3.30
RUN cd /tmp && \
    curl -O https://repo.continuum.io/miniconda/Miniconda3-${VER_MINICONDA}-Linux-x86_64.sh && \
    chmod 755 Miniconda3-${VER_MINICONDA}-Linux-x86_64.sh                                   && \
    ./Miniconda3-${VER_MINICONDA}-Linux-x86_64.sh -b -u -p ${CONDA_DIR}                     && \
    rm Miniconda3-${VER_MINICONDA}-Linux-x86_64.sh && \
    conda install -y python=3.5.0 && \
    conda install -y -c conda-forge feather-format pandas-profiling icu=56 && \
    conda install -y numpy scipy matplotlib conda-build notebook gcc plotly   \
                     pandas scipy scikit-learn nltk six wheel seaborn h5py    \
                     libgcc pyyaml setuptools cffi                         && \                         
    conda clean -tiy   



RUN rm ${CONDA_DIR}/lib/libstdc++.so.6 && \
    ln -s /usr/lib/x86_64-linux-gnu/libstdc++.so.6 ${CONDA_DIR}/lib/libstdc++.so.6 

RUN npm install bower -g && \
    npm cache clear      && \
    bower cache clean --allow-root

# configurable-proxy for jupyterhub
#https://github.com/npm/npm/issues/10983
ARG VER_CONF_PROXY=3.0.0
RUN cd /tmp && \
    git clone https://github.com/jupyterhub/configurable-http-proxy && \
    cd configurable-http-proxy  &&\
    git checkout ${VER_CONF_PROXY} && \
    cd /tmp/configurable-http-proxy && \
    npm install -g && \
    rm -rf /tmp/configurable-http-proxy/ 

ARG VER_JUPYTER_HUB=0.8.0 
ARG VER_JUPYTER_NOTEBOOK=5.1.0
ARG VER_JUPYTER_LAB=v0.27.0 
ARG VER_KERAS=2.0.8 
# PILLOW SIMD
RUN CC="cc -mavx2" pip install  --no-cache-dir -U --force-reinstall git+https://github.com/uploadcare/pillow-simd && \
    pip install --no-cache-dir git+https://github.com/jupyterhub/jupyterhub.git@${VER_JUPTER_HUB} && \
    pip install --no-cache-dir git+https://github.com/jupyter/notebook.git@${VER_JUPYTER_NOTEBOOK} && \ 
    pip install --no-cache-dir git+https://github.com/jupyterlab/jupyterlab.git@${VER_JUPYTER_LAB} && \
    pip install --no-cache-dir git+https://github.com/fchollet/keras.git@${VER_KERAS}

#LD HAD /usr/lib/x86_64-linux-gnu...
#ENV PATH=/opt/conda/bin:$PATH 
FROM ml_04 AS ml_05
# Build VTK, OpenCV asks for folder with it
ARG VER_VTK=v8.0.1
ARG VTK_DIR=/opt/vtk
RUN ldconfig && cd /tmp && \
    git clone https://github.com/Kitware/VTK.git && \
    cd VTK && \
    git checkout --track -b release origin/release && \
    git checkout ${VER_VTK} && \
    mkdir build && \ 
    cd build && \
    cmake .. \
    -DCMAKE_INSTALL_PREFIX=${VTK_DIR} \
    -DBUILD_SHARED_LIBS=ON && \
    make -j${NUM_CORES} && \
    make install && \
    rm /tmp/VTK -rf

FROM ml_04 AS ml_06
COPY --from=ml_05 /opt/vtk /opt/vtk
# LibLZMA 
RUN cd /tmp && \
    wget http://tukaani.org/xz/xz-5.2.2.tar.gz && \
    tar -zxvf xz-5.2.2.tar.gz && \
    cd xz-5.2.2/  && \
    ./configure && \
    make -j${NUM_CORES} && \
    make install && \
    cd .. && \
    rm xz-5.2.2.tar.gz && \
    rm xz-5.2.2/ -rf    

# Install libTIFF so OpenCV does not complain about missing references and version number
RUN cd /tmp && \
    wget http://old-releases.ubuntu.com/ubuntu/pool/universe/t/tiff3/libtiff4_3.9.7-2ubuntu1_amd64.deb && \
    dpkg -i libtiff4_3.9.7-2ubuntu1_amd64.deb  && \
    rm libtiff4_3.9.7-2ubuntu1_amd64.deb

FROM ml_06 AS ml_07

#https://github.com/xianyi/OpenBLAS/wiki/faq#debianlts
RUN cd /tmp && git clone https://github.com/xianyi/OpenBLAS.git && \
    cd OpenBLAS && \
    make clean && \
    make PREFIX=/opt/openblas DYNAMIC_ARCH=1 && \
    make PREFIX=/opt/openblas DYNAMIC_ARCH=1 install && \
    update-alternatives --install /usr/lib/libblas.so.3 libblas.so.3     /opt/openblas/lib/libopenblas.so.0 41  && \
    update-alternatives --install /usr/lib/liblapack.so.3 liblapack.so.3 /opt/openblas/lib/libopenblas.so.0 41 && \
    rm -rf /tmp/OpenBLAS

FROM ml_06 AS ml_08
COPY --from=ml_07 /opt/openblas /opt/openblas

# GFlags and GLog and GTest
RUN cd /tmp && \
    git clone https://github.com/gflags/gflags && \
    cd gflags && mkdir build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_SHARED_LIBS=ON && \
    make -j${NUM_CORES} && make install && \
    cd /tmp && \
    git clone https://github.com/google/glog.git && \
    cd glog && mkdir build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_SHARED_LIBS=ON && \
    make -j${NUM_CORES} && make install && \
    cd /tmp && \
    git clone https://github.com/google/googletest.git && \
    cd googletest && mkdir build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_SHARED_LIBS=ON && \
    make -j${NUM_CORES} && make install && \ 
    rm -rf /tmp/gflags     && \
    rm -rf /tmp/glog       && \
    rm -rf /tmp/googletest && \
    updatedb && ldconfig   

FROM ml_08 AS ml_09

# remove conda from path, for a minute, otherwise opencv compilation fails 
ENV OLD_PATH=${PATH} \
    PATH=/usr/lib/x86_64-linux-gnu:/usr/lib/jvm/java-8-openjdk-amd64:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin       \
    LD_LIBRARY_PATH=${JAVA_HOME}/lib/amd64/server/:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/server:/opt/boost/lib:/usr/local/cuda/lib64/:${CONDA_DIR}/lib/R/lib/:/usr/local/nvidia/lib64/:/usr/local/nvidia/lib:/lib/x86_64-linux-gnu:/usr/local/cuda/extras/CUPTI/lib64 
#https://github.com/opencv/opencv/issues/7933
ARG VER_OPENCV=master
ARG VER_PYTHON_DET=python3.5
ARG OPENCV_DIR=/opt/opencv
RUN cd /tmp && \
    git clone https://github.com/opencv/opencv.git && \
    cd opencv && \
    git checkout ${VER_OPENCV} && \
    git clone https://github.com/opencv/opencv_contrib.git && \ 
    cd opencv_contrib && \
    git checkout ${VER_OPENCV} && \
    cd /tmp/opencv && mkdir build && cd build && \
    cmake .. \
    -DProtobuf_PROTOC_EXECUTABLE=/usr/bin/protoc \
    -DProtobuf_INCLUDE_DIRS=/usr/include/google/protobuf \
    -DProtobuf_LIBRARIES=/usr/lib \
    -DProtobuf_LIBRARY=/usr/lib/libprotobuf.so \
    -DPROTOBUF_UPDATE_FILES=ON \
    -DBUILD_PROTOBUF=OFF \
    -DBUILD_opencv_dnn=OFF \
    -DPYTHON_PACKAGES_PATH=${CONDA_DIR}/lib/${VER_PYTHON_DET}/site-packages \
    -DBUILD_opencv_dnn_modern=OFF \
    -DOPENCV_EXTRA_MODULES_PATH=/tmp/opencv/opencv_contrib/modules \
    -DCMAKE_C_COMPILER=gcc-4.9 \
    -DCMAKE_CXX_COMPILER=g++-4.9 \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=${OPENCV_DIR} \
    -DWITH_TBB=ON \
    -DWITH_PTHREADS_PF=ON \
    -DWITH_OPENNI2=OFF \
    -DBUILD_opencv_legacy=OFF \
    -DBUILD_NEW_PYTHON_SUPPORT=ON \
    -DWITH_V4L=ON \
    -DWITH_QT=OFF \
    -DWITH_CUDA=ON \
    -DWITH_CUFFT=ON \
    -DWITH_CUBLAS=ON \
    -DCMAKE_LIBRARY_PATH=/usr/local/cuda/lib64/stubs \
    -DENABLE_PRECOMPILED_HEADERS=OFF \
    -DUSE_GStreamer=ON \
    -DBUILD_OPENCV_PYTHON3=1 \
    -DPYTHON3_NUMPY_INCLUDE_DIRS=${CONDA_DIR}/lib/${VER_PYTHON_DET}/site-packages/numpy/core/include \
    -DPYTHON3_EXECUTABLE=${CONDA_DIR}/bin/${VER_PYTHON_DET} \
    -DPYTHON3_INCLUDE_DIR=${CONDA_DIR}/include/${VER_PYTHON_DET}m \
    -DPYTHON3_INCLUDE_PATH=${CONDA_DIR}/include/${VER_PYTHON_DET}m \
    -DPYTHON3_LIBRARIES=${CONDA_DIR}/lib \
    -DPYTHON3_LIBRARY=${CONDA_DIR}/lib/lib${VER_PYTHON_DET}m.so \
    -DCUDA_GENERATION=Auto \
    -DFORCE_VTK=ON \
    -DWITH_GDAL=OFF \
    -DWITH_XINE=ON \
    -DWITH_NVCUVID=ON \
    -DBUILD_EXAMPLES=ON \
    -DBUILD_NEW_PYTHON_SUPPORT=ON \
    -DWITH_V4L=ON \
    -DINSTALL_C_EXAMPLES=ON \
    -DINSTALL_PYTHON_EXAMPLES=ON \
    -DBUILD_EXAMPLES=ON \
    -DWITH_OPENNI=OFF \
    -DWITH_OPENGL=ON \
    -DWITH_IPP=ON \
    -DWITH_CSTRIPES=ON \
    -DWITH_CUBLAS=ON \
    -DWITH_NVCUVID=ON \
    -DENABLE_FAST_MATH=1 \
    -DCUDA_FAST_MATH=1 \
    -DCUDA_NVCC_FLAGS="-D_FORCE_INLINES" \
    -DINSTALL_C_EXAMPLES=ON         \
    -DBUILD_EXAMPLES=ON             \
    -DINSTALL_PYTHON_EXAMPLES=ON    \
    -DBUILD_TESTS=ON                \
    -DWITH_TIFF=ON                  \
    -DBUILD_TIFF=OFF                \
    -DVTK_DIR=${VTK_DIR}/build                \
    -DOPENCL_LIBRARIES=/usr/local/cuda-9.0/targets/x86_64-linux/lib/libOpenCL.so.1.0.0  && \
    cd /tmp/opencv/build && \    
    make -j${NUM_CORES+1} && \
    cd /tmp/opencv/build && \
    make install  && \
    ldconfig && rm -rf /tmp/opencv && \
    mkdir -p /tmp/wheel/cv2 

RUN cd /tmp/wheel && \
    wget https://raw.githubusercontent.com/skvark/opencv-python/master/setup.py && \
    wget https://raw.githubusercontent.com/skvark/opencv-python/master/README.rst && \
    wget https://raw.githubusercontent.com/skvark/opencv-python/master/LICENSE.txt && \
    wget https://raw.githubusercontent.com/skvark/opencv-python/master/LICENSE-3RD-PARTY.txt && \
    cd /tmp/wheel/cv2 && wget https://raw.githubusercontent.com/skvark/opencv-python/master/cv2/__init__.py && cd /tmp && \
    python -c "f= open('/tmp/wheel/cv_version.py','w');f.write('opencv_version = \"3.3.0\"');f.close()" && \
    echo 'Copying *.so for Py3' && \
    cp /opt/opencv/lib/python3.5/site-packages/*.so /tmp/wheel/cv2/ && cd /tmp/wheel && \
    echo 'Build wheel'  && \
    pip wheel . -w /pip_pkg && \
    rm -rf /tmp/opencv && \
    rm -rf /tmp/wheel

# we need to overwrite LD-LIBRARY so nvidia can find libnvidia-ml.so
#ENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${CONDA_DIR}/lib/R/lib/:${CONDA_DIR}/lib/ \
#Restore old Path
ENV PATH=${OLD_PATH}
    
FROM ml_08 AS ml_10
COPY --from=ml_09 /pip_pkg/opencv*.whl /pip_pkg/
COPY --from=ml_09 /opt/opencv/ /opt/opencv/
# xgboost
RUN cd /usr/local/src && mkdir xgboost && cd xgboost && \
    git clone --depth 1 --recursive https://github.com/dmlc/xgboost.git && cd xgboost && \
    make && cd python-package && ${CONDA_DIR}/bin/${VER_PYTHON} setup.py install 

# Install Tensorflow and protobuf with cpp implmenetation to anacconda's python env
RUN cd /pip_pkg  && ls && \
    ${CONDA_DIR}/bin/pip install --no-cache-dir --upgrade protobuf*.whl && \
    ${CONDA_DIR}/bin/pip install --no-cache-dir --upgrade tensorflow*.whl && \
    ${CONDA_DIR}/bin/pip install --no-cache-dir --upgrade opencv_*.whl 

FROM ml_10 AS ml_11

# Boost
ARG VER_PYTHON_DET=python3.5
ENV CPLUS_INCLUDE_PATH=/usr/include/${VER_PYTHON_DET}m
ARG VER_BOOST=1.65.1
ARG VER_BOOST_=1_65_1
ARG BOOST_DIR=/opt/boost
ENV BOOST_ROOT=${BOOST_DIR}
RUN cd /tmp && \
    curl -L -o boost.tar.gz --url https://dl.bintray.com/boostorg/release/${VER_BOOST}/source/boost_${VER_BOOST_}.tar.gz && \
    tar -zxvf boost.tar.gz && cd boost_${VER_BOOST_} && rm -rf boost.tar.gz && \
    ./bootstrap.sh --prefix=${BOOST_DIR} && \
    ./b2 install -j9 --with-program_options address-model=64  link=static,shared threading=multi --with-python --with-system  \ 
                     --with-thread --with-mpi --with-signals --with-regex --with-timer --with-iostreams --with-graph_parallel \
                     --with-serialization && \
    rm -rf /tmp/boost_${VER_BOOST_} && \
    rm -rf /tmp/boost.tar.gz



FROM ml_10 AS ml_12
COPY --from=ml_11 ${BOOST_ROOT}/ ${BOOST_ROOT}/

# GLoo
RUN cd /tmp && \
    git clone --recursive https://github.com/facebookincubator/gloo && \
    cd /tmp/gloo && mkdir build && cd build && \
    cmake ../ \
    -DBUILD_TEST=1 \
    -DBUILD_BENCHMARK=1 \
    -DUSE_MPI=1 \
    -DUSE_CUDA=1 && \
    make && make install && \
    rm -rf /tmp/gloo

# library that has to be newer in conda for cv2 to work
RUN rm ${CONDA_DIR}/bin/../lib/libgomp.so* && \ 
    ln -s /usr/lib/x86_64-linux-gnu/libgomp.so ${CONDA_DIR}/bin/../lib/libgomp.so


FROM ml_12 AS ml_13

# Magma needed for PyTorch
# at the time being it does not have a proper Cuda 9.0 installer,
# so we use patch from https://github.com/pytorch/builder.git
# To find pthread
#-- Define -DHAVE_CUBLAS -DMIN_CUDA_ARCH=200
#-- Searching for BLAS and LAPACK. To override, set LAPACK_LIBRARIES using ccmake.
#--     BLAS_LIBRARIES:
#--     LAPACK_LIBRARIES:
ARG MAGMA_DIR=/opt/magma-2.2.0
RUN cd /tmp && \
    git clone https://github.com/pytorch/builder.git && \
    wget http://icl.cs.utk.edu/projectsfiles/magma/downloads/magma-2.2.0.tar.gz && \
    tar zxvf magma-2.2.0.tar.gz && \        
    cd magma-2.2.0 && \
    patch CMakeLists.txt < /tmp/builder/conda/magma-cuda90-2.2.0/cmakelists.patch && \
    patch control/thread_queue.cpp < /tmp/builder/conda/magma-cuda90-2.2.0/thread_queue.patch && \
    mkdir build && cd build && \
    cmake .. \
    -DUSE_FORTRAN=OFF \
    -DGPU_TARGET="All" \
    -DCMAKE_INSTALL_PREFIX=${MAGMA_DIR} && \
    make -j$(getconf _NPROCESSORS_CONF) && \
    make install && \
    rm -rf /tmp/magma-2.2.0 && \
    rm -rf /tmp/magma-2.2.0.tar.gz && \
    rm -rf /tmp/builder

#ARG PYTORCH_DIR=/opt/pytorch
#ENV CMAKE_LIBRARY_PATH=${PYTORCH_DIR}/lib:${PYTORCH_DIR}/include:$CMAKE_LIBRARY_PATH \
#    CMAKE_PREFIX_PATH=${PYTORCH_DIR} \
#    PATH=${PYTORCH_DIR}/bin:$PATH  

#RUN cd /tmp && \
#    git clone --recursive https://github.com/pytorch/pytorch && \
#    rm -rf /tmp/pytorch 
#RUN cd /tmp/pytorch && \
#    ${CONDA_DIR}/bin/${VER_PYTHON_DET} setup.py install

FROM ml_12 AS ml_15
#COPY --from=ml_13 /opt/pytorch/ /opt/pytorch/
COPY --from=ml_13 /opt/magma-2.2.0/ /opt/magma-2.2.0/


ARG VER_TINI=v0.16.1     
ADD https://github.com/krallin/tini/releases/download/${VER_TINI}/tini /tini 
RUN chmod +x /tini     


ADD fix-permissions /usr/local/bin/fix-permissions
# Docker cannot run two CMD in one file, so if one wants to run multiple
# processes it is required to use something like supervisor.
ENV HOME=/home/jovyan \
    NB_USER=jovyan \
    NB_UID=1000    \
    NB_GID=100     
RUN useradd -m -s /bin/bash -N -u $NB_UID $NB_USER && \
    mkdir -p /models && \
    mkdir -p /var/log/supervisor && \
    mkdir -p /etc/jupyterhub && \
    chown $NB_USER:$NB_GID /opt/bin -R && \
    fix-permissions /etc/jupyterhub/

EXPOSE 6006 8000
WORKDIR $HOME
# Configure container startup
ENTRYPOINT ["/tini", "--"]
CMD ["/usr/bin/supervisord"]
#CMD ["start-notebook.sh","start-tensorboard.sh"]

# Add local files as late as possible to avoid cache busting
COPY start.sh /opt/bin/
COPY start-tensorboard.sh /opt/bin/
COPY start-notebook.sh /opt/bin/
COPY start-jupyterhub.sh /opt/bin/
COPY start-singleuser.sh /opt/bin/
COPY jupyter_notebook_config.py /etc/jupyter/
COPY jupyterhub_config.py /etc/jupyterhub/
COPY supervisord.conf /etc/supervisor/supervisord.conf
COPY tensorboard.conf /etc/supervisor/conf.d/tensorboard.conf
COPY jupyterhub.conf  /etc/supervisor/conf.d/jupyterhub.conf

ENV CONDA_DIR=${CONDA_DIR}
ENV PATH=${PATH}
ENV LD_LIBRARY_PATH=${LD_LIBRARY_PATH}
# Cleaning
#
RUN apt-get purge -y --auto-remove && \
    rm /tmp/* -rf && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    conda clean -tiy   && \
    npm cache clean  && \
    rm -rf /root/.cache  && \
    bower cache clean --allow-root && \
    rm -rf /pip_pkg && \
    rm -rf /root/.cache
# seems like OpenCV compiled without VTK
# need to isntall Protobuf and Tensorflow for Anaconda's python
#substitute cuda version for variable, in different folder names
